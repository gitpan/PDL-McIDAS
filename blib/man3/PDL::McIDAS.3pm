.\" Automatically generated by Pod::Man v1.3, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "McIDAS 3"
.TH McIDAS 3 "2003-01-13" "perl v5.6.1" "User Contributed Perl Documentation"
.UC
.SH "NAME"
PDL::McIDAS \*(-- \s-1PDL\s0 interface to McIDAS.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use PDL;
\&  use PDL::McIDAS;
.Ve
.Vb 6
\&  ($level,$rows,$columns,$year,$day,$hour,$validity,
\&        $num_grid,$maptype,$proj_34,$proj_35,$proj_36,
\&         $proj_37,$proj_38,$proj_39,
\&         $num_grids,$pfile,$gridname,
\&         $levelunits,$gridorigin)=
\&            PDL::McIDAS::grdlist('GRID0101');
.Ve
.Vb 1
\&  $data=PDL::McIDAS::grd2pdl('GRID0101',5);
.Ve
.Vb 1
\&  PDL::McIDAS::mcimagrgb($ir,$ig,$ib,{TRANSFORM=>$tr});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
PDL::McIDAS allows you to read into \s-1PDL\s0 the McIDAS \s-1GRID\s0 files. There
is also a function to plot \s-1RGB\s0 images.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&        Xavier Calbet    and Javier Garcia-Pereda 
\&        (xcalbet@yahoo.es, javierpereda@yahoo.com)
.Ve
Copyright (c) 2003 Xavier Calbet and Javier Garcia-Pereda 
(xcalbet@yahoo.es, javierpereda@yahoo.com).  All
rights reserved. This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.Sh "grdlist"
.IX Subsection "grdlist"
PDL::McIDAS::grdlist is equivalent to the \s-1GRDLIST\s0 command from McIDAS
and shows the various header parameters of the McIDAS \s-1GRID\s0 file.
It accepts as argument a McIDAS \s-1GRID\s0 file name. As output it gives an array
of PDLs, each one of them containing a different parameter of the \s-1GRID\s0
header. As an example, if a McIDAS \s-1GRID\s0 file called \*(L"\s-1GRID0101\s0\*(R" 
is to be read into \s-1PDL\s0 we will proceed as follows:
.PP
($level,$rows,$columns,$year,$day,$hour,$validity,
 \f(CW$num_grid\fR,$maptype,$proj_34,$proj_35,$proj_36,
 \f(CW$proj_37\fR,$proj_38,$proj_39,
 \f(CW$num_grids\fR,$pfile,$gridname,
 \f(CW$levelunits\fR,$gridorigin)=
        PDL::McIDAS::grdlist('\s-1GRID0101\s0');
.PP
$cgridname=PDL::Char\->new(PDL::copy($gridname));
.PP
print \*(L"level      \*(R",$level,\*(L"\en\*(R";
.PP
print \*(L"rows       \*(R",$rows,\*(L"\en\*(R";
.PP
print \*(L"columns    \*(R",$columns,\*(L"\en\*(R";
.PP
print \*(L"year       \*(R",$year,\*(L"\en\*(R";
.PP
print \*(L"day        \*(R",$day,\*(L"\en\*(R";
.PP
print \*(L"hour       \*(R",$hour,\*(L"\en\*(R";
.PP
print \*(L"validity   \*(R",$validity,\*(L"\en\*(R";
.PP
print \*(L"num_grid   \*(R",$num_grid,\*(L"\en\*(R";
.PP
print \*(L"maptype    \*(R",$maptype,\*(L"\en\*(R";
.PP
print \*(L"proj_34    \*(R",$proj_34,\*(L"\en\*(R";
.PP
print \*(L"proj_35    \*(R",$proj_35,\*(L"\en\*(R";
.PP
print \*(L"proj_36    \*(R",$proj_36,\*(L"\en\*(R";
.PP
print \*(L"proj_37    \*(R",$proj_37,\*(L"\en\*(R";
.PP
print \*(L"proj_38    \*(R",$proj_38,\*(L"\en\*(R";
.PP
print \*(L"proj_39    \*(R",$proj_39,\*(L"\en\*(R";
.PP
print \*(L"num_grids  \*(R",$num_grids,\*(L"\en\*(R";
.PP
print \*(L"pfile      \*(R",$pfile,\*(L"\en\*(R";
.PP
print \*(L"gridname   \*(R",$gridname,\*(L"\en\*(R";
.PP
print \*(L"cgridname  \*(R",$cgridname,\*(L"\en\*(R";
.PP
print \*(L"levelunits \*(R",$levelunits,\*(L"\en\*(R";
.PP
print \*(L"gridorigin \*(R",$gridorigin,\*(L"\en\*(R";
.Sh "grd2pdl"
.IX Subsection "grd2pdl"
PDL::McIDAS::grd2pdl reads the data from a McIDAS grid and transfers
it to a \s-1PDL\s0. As arguments it accepts a McIDAS \s-1GRID\s0 file name and
the grid number to be read. As output, a \s-1PDL\s0 is given containing
the data from the \s-1GRID\s0 file. The grid number can be found with the
grdlist function in the \f(CW$num_grid\fR \s-1PDL\s0 header parameter of the McIDAS
\&\s-1GRID\s0 file (see the description of the grdlist function in this man page).
As an example:
.PP
$data=PDL::McIDAS::grd2pdl('\s-1GRID0101\s0',5);
.Sh "mcimagrgb"
.IX Subsection "mcimagrgb"
PDL::McIDAS::mcimagrgb draws an \s-1RGB\s0 image with \s-1PGPLOT\s0, composing
colors with the \s-1RGB\s0 data. As input it accepts three two dimensional
 PDLs with ranges between 0 and 255 which correspond to the red, green
and blue colors and the modifiers to the \s-1PGPLOT\s0 imag function.
As an example:
.PP
$ir=pdl(byte,[[255,255],[255,255]]);
\&\f(CW$ig\fR=pdl(byte,[[0,255],[255,0]]);
\&\f(CW$ib\fR=pdl(byte,[[0,0],[255,255]]);
.PP
dev('/xserve');
.PP
env(\-0.5,1.5,\-0.5,1.5);
.PP
$tr=pdl( [ 0, 1, 0, 0, 0, 1 ]);
.PP
env(0,1,0,1);
.PP
PDL::McIDAS::mcimagrgb($ir,$ig,$ib,{TRANSFORM=>$tr});
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.Sh "h_grdlist"
.IX Subsection "h_grdlist"
.Vb 1
\&  Signature: ([o]level(3000);[o]rows(3000);[o]columns(3000);[o]year(3000);[o]day(3000);[o]hour(3000);[o]validity(3000);[o]num_grid(3000);[o]maptype(3000);[o]proj_34(3000);[o]proj_35(3000);[o]proj_36(3000);[o]proj_37(3000);[o]proj_38(3000);[o]proj_39(3000);[o]num_grids();byte file(256,1);byte [o]gridname(4,3000);byte [o]levelunits(4,3000);byte [o]gridorigin(4,3000))
.Ve
Inner function (not oriented to the end user) 
used to lists the grid headers of the McIDAS grid file 
defined in grid_file.
.Sh "h_grd2pdl"
.IX Subsection "h_grd2pdl"
.Vb 1
\&  Signature: ([o]data(elements); num_grid(); byte file(256,1))
.Ve
Inner function (not intended for end users) which copies a 
given grid from a McIDAS grid file to a pdl matrix.
