#include <stdio.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <string.h>
#include "l_grdlist.h"

void l_grdlist(int * dato,long fake[PARAMETERS][GRIDS],
	       long header[PARAMETERS][GRIDS]) { 

  FILE* LECTURA;
 

  char archivo[100];
  char label[33];
  long int project, date;
  long int max_grid;
  long int offset[3000];

  long int elementos, filas, columnas;
  long int fecha, anno, dia, hora, validez;
  long int gridscale;
  long int gridname,gridunits,levelunits,maptype;
  long int level, levelscale, gridtype;
  long int timevariation, levelvariation, gridorigin;
  long int proj_34, proj_35, proj_36, proj_37;
  long int proj_38, proj_39;

  int n;
   
  printf("hola\n");
    for (n = 0; n < 10; n++) { 
      //printf("i %d\n",i);
      printf("%4ld  %4ld %2ld ", fake[0][n], fake[1][n], fake[2][n]);
      printf("%4ld %3ld %6ld  ", fake[3][n], fake[4][n], fake[5][n]);
      printf("%3ld  %4ld %4ld\n", fake[6][n], fake[7][n], fake[8][n]);  
    }


  *dato=0;
  strcpy(archivo,"GRID0101");

  if ((LECTURA = fopen(archivo, "r")) != NULL)
  {  /* Offset de encabezamiento de archivo GRID;
        Determinacion del número de busqueda del primer GRID */

    fread(label,32,1,LECTURA);
    label[32]=0;

    fread(&project,4,1,LECTURA);
    project=htonl(project);
    fread(&date,4,1,LECTURA);
    date=htonl(date);

    fread(&max_grid,4,1,LECTURA);
    max_grid=htonl(max_grid);
    max_grid=-max_grid;
      
    fread(offset,4,max_grid+1,LECTURA);
    for (n=0;n<=max_grid;n++) 
      offset[n]=htonl(offset[n]);

    
    /* Encabezamiento de cada GRID */
    for (n=0;n<(int)max_grid;n++) { 

      if (offset[n]==-1) continue;
      (*dato)++;
      fseek(LECTURA, offset[n]*4, SEEK_SET); 
      
      fread(&elementos,4,1,LECTURA);
      elementos=htonl(elementos);
      fread(&filas,4,1,LECTURA);
      filas=htonl(filas);
      fread(&columnas,4,1,LECTURA);
      columnas=htonl(columnas);

      fread(&fecha,4,1,LECTURA);
      fecha=htonl(fecha); 
      dia=fecha%1000;
      anno=((fecha+1900000)-dia)/1000;     

      fread(&hora,4,1,LECTURA);
      hora=htonl(hora);
      fread(&validez,4,1,LECTURA);
      validez=htonl(validez);

      fread(&gridname,4,1,LECTURA);
      gridname=htonl(gridname);
      fread(&gridscale,4,1,LECTURA);
      gridscale=htonl(gridscale);
      fread(&gridunits,4,1,LECTURA);
      gridunits=htonl(gridunits);

      fread(&level,4,1,LECTURA);
      level=htonl(level);
      fread(&levelscale,4,1,LECTURA);
      levelscale=htonl(levelscale);
      fread(&levelunits,4,1,LECTURA);
      levelunits=htonl(levelunits);
       
      fread(&gridtype,4,1,LECTURA);
      gridtype=htonl(gridtype);
      fread(&timevariation,4,1,LECTURA);
      timevariation=htonl(timevariation);
      fread(&levelvariation,4,1,LECTURA);
      levelvariation=htonl(levelvariation);

      /* Variables reservadas */
      fseek(LECTURA, 16*4, SEEK_CUR);
      fread(&gridorigin,4,1,LECTURA);
      gridorigin=htonl(gridorigin);
      fread(&maptype,4,1,LECTURA);
      maptype=htonl(maptype);

      /* Variables de proyeccion */
      fread(&proj_34,4,1,LECTURA);
      proj_34=htonl(proj_34);
      fread(&proj_35,4,1,LECTURA);
      proj_35=htonl(proj_35);
      fread(&proj_36,4,1,LECTURA);
      proj_36=htonl(proj_36);
      fread(&proj_37,4,1,LECTURA);
      proj_37=htonl(proj_37);
      fread(&proj_38,4,1,LECTURA);
      proj_38=htonl(proj_38);
      fread(&proj_39,4,1,LECTURA);
      proj_39=htonl(proj_39);

      header[0][n] = gridname;
      header[1][n] = level;
      header[2][n] = levelunits;
      header[3][n] = anno;
      header[4][n] = dia;
      header[5][n] = hora;
      header[6][n] = validez;
      header[7][n] = (long int) n+1;
      header[8][n] = maptype;
    }

    fclose(LECTURA);   
  }

  printf("adios\n");
    for (n = 0; n < 10; n++) { 
      //printf("i %d\n",i);
      printf("%4ld  %4ld %2ld ", header[0][n], header[1][n], header[2][n]);
      printf("%4ld %3ld %6ld  ", header[3][n], header[4][n], header[5][n]);
      printf("%3ld  %4ld %4ld\n", header[6][n], header[7][n], header[8][n]);  
    }


}




